---
# tasks file for final_backup

# Gather dictionary statistics to ensure the Data pump export runs as fast as possible

# - name: gather statistics on {{source_hostname}}
#   shell: |
#     export ORACLE_SID={{source_oracle_sid}}
#     export ORACLE_HOME={{source_oracle_home}}
#     printf "SET PAGESIZE 0 VERIFY OFF HEADING OFF ECHO OFF\n exec dbms_stats.gather_dictionary_stats;" | {{ source_oracle_home }}/bin/sqlplus -s {{source_conn_str}} as sysdba  
#   register: statistics_out

# - name: display statistics_out
#   debug: 
#     msg: "{{statistics_out.stdout_lines}}"

- name: purge the recyclebin
  shell:  |
    export ORACLE_SID={{source_oracle_sid}}
    export ORACLE_HOME={{source_oracle_home}}
    printf "SET PAGESIZE 0 VERIFY OFF HEADING OFF ECHO OFF\n purge dba_recyclebin;" | {{ source_oracle_home }}/bin/sqlplus -s {{source_conn_str}} as sysdba
  register: recyclebin_out

- name: display recyclebin_out
  debug: 
    msg: "{{recyclebin_out.stdout_lines}}"

- name: list tablespaces
  debug:
    msg:
     - "{{tablespaces}}"

- name: alter the provided user tablspaces to read only
  shell: |
    export ORACLE_SID={{source_oracle_sid}}
    export ORACLE_HOME={{source_oracle_home}}
    printf "SET PAGESIZE 0 VERIFY OFF HEADING OFF ECHO OFF\n alter tablespace {{item}} read only;" | {{ source_oracle_home }}/bin/sqlplus -s {{source_conn_str}} as sysdba  
  with_items: "{{tablespaces.split(',')}}"
  register: tbs_out

- name: display tbs_out
  debug:
    msg: "{{item.stdout_lines}}"
  with_items: "{{tbs_out.results}}"

- name: run the verification scripts capture the source db objects details 
  shell: |
    export ORACLE_SID={{source_oracle_sid}}
    export ORACLE_HOME={{source_oracle_home}}
    cd {{source_verification_dir}}
    printf '@{{ item }}' | {{ source_oracle_home }}/bin/sqlplus -s {{source_conn_str}} as sysdba
  with_items: 
      - "{{source_verification_dir}}/Application_Objects_In_System_Sysaux.sql"
      - "{{source_verification_dir}}/DB_Links_Details.sql"
      - "{{source_verification_dir}}/Granted_Roles.sql"
      - "{{source_verification_dir}}/Invalid_Objects.sql"
      - "{{source_verification_dir}}/List_Schemas_And_Default_TBS.sql"
      - "{{source_verification_dir}}/Object_Count_Per_Schema.sql"
      - "{{source_verification_dir}}/Schedules_jobs.sql"
  register: sql_out
  tags: source_db_verification

- name: display sql_out
  debug: 
     msg: "{{item.stdout_lines}}"
  with_items: "{{sql_out.results}}" 
  tags: source_db_verification

- name: create a directory on Ansible controller node to store the db verification log files
  file:
    path: "/home/ansibleadmin/db_reconciliation/{{ source_db }}"
    state: directory
  become: true
  become_user: ansibleadmin
  delegate_to: localhost
  tags: pre_mig_copy_source_db_verification_files

- name: find the.log files from "{{ source_verification_dir }}" directory
  find:
    paths: "{{source_verification_dir}}/"
    patterns: "*.log"
  register: log_files 
  tags: pre_mig_copy_source_db_verification_files 

# - name: debug log_files
#   debug: var=log_files

- name: copy the verification log files from the source db to Ansible-controller for reconciliation
  fetch:
    src: "{{ item.path }}"
    dest: "/home/ansibleadmin/db_reconciliation/{{ source_db }}/"
    flat: yes
  with_items: "{{ log_files.files }}"
  tags: pre_mig_copy_source_db_verification_files

# - name: check user privilege escalation
#   shell: |
#     hostname
#     whoami
#     date
#   register: output
#   tags: pre_mig_copy_source_db_verification_files

# - debug: var=output.stdout_lines
#   tags: pre_mig_copy_source_db_verification_files

## do the final incremental backup

##Note: Tablespace read-only error is expected and it's ignorable 

# - name: do the final incremental backup on {{source_hostname}}
#   shell: |
#     export TMPDIR={{source_xtts_scripts_dir}}
#     export ORACLE_SID={{source_oracle_sid}}
#     export ORACLE_HOME={{source_oracle_home}}
#     export NLS_LANG={{ nls_lang }}
#     cd {{source_xtts_scripts_dir}}
#     {{source_oracle_home}}/perl/bin/perl xttdriver.pl --backup
#   register: backup_out
 



# - name: validate if the final incremental backup has been completed successfully
#   debug: 
#     msg: 
#      - "Final incremental backup has now been completed"
#      - "{{backup_out.stdout_lines}}"
#   when: backup_out.rc == 0


- name: Do the final incremental backup on {{ source_hostname }}
  async: 604800 # Maximum wait time for the task in seconds (1 week)
  poll: 0       # Start the task and don't wait for it to finish
  shell: |
    export TMPDIR={{ source_xtts_scripts_dir }}
    export ORACLE_SID={{ source_oracle_sid }}
    export ORACLE_HOME={{ source_oracle_home }}
    export NLS_LANG={{ nls_lang }}
    cd {{ source_xtts_scripts_dir }}
    {{ source_oracle_home }}/perl/bin/perl xttdriver.pl --backup
  register: backup_async_job

- name: Wait for the final incremental backup job to finish
  async_status:
    jid: "{{ backup_async_job.ansible_job_id }}"
  register: backup_out
  until: backup_out.finished
  retries: 20160  # Retry up to 1 week (20160 retries with 30-second delay each)
  delay: 30       # Delay between retries

- name: Validate if the final incremental backup has been completed successfully
  debug:
    msg: 
      - "Final incremental backup has now been completed"
      - "{{ backup_out.stdout_lines }}"
  when: backup_out.rc == 0


