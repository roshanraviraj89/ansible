---
# tasks file for post_mig_check

- name: run utlrp.sql
  shell: |
    . /home/oracle/{{target_db}}.env
    cd {{target_oracle_home}}/rdbms/admin
    echo -e '@utlrp.sql' |{{ target_oracle_home }}/bin/sqlplus -s {{target_conn_str}} as sysdba 
  register: utl_out
  tags: post_mig_run_utlrp

- name: display utlrp log
  debug:
    msg: "{{utl_out.stdout_lines}}"
  tags: post_mig_run_utlrp

  


- name: run the verification scripts capture the target db objects details 
  shell: |
    . /home/oracle/{{target_db}}.env
    cd {{target_verification_dir}}
    echo -e '@{{ item }}' |{{ target_oracle_home }}/bin/sqlplus -s {{target_conn_str}} as sysdba 
  with_items: 
      - "{{target_verification_dir}}/Application_Objects_In_System_Sysaux.sql"
      - "{{target_verification_dir}}/DB_Links_Details.sql"
      - "{{target_verification_dir}}/Granted_Roles.sql"
      - "{{target_verification_dir}}/Invalid_Objects.sql"
      - "{{target_verification_dir}}/List_Schemas_And_Default_TBS.sql"
      - "{{target_verification_dir}}/Object_Count_Per_Schema.sql"
      - "{{target_verification_dir}}/Schedules_jobs.sql"
  register: sql_out
  tags: post_mig_target_db_verification

- name: display sql_out
  debug: 
     msg: "{{item.stdout_lines}}"
  with_items: "{{sql_out.results}}"
  tags: post_mig_target_db_verification

- name: create a directory on Ansible controller node to store the db verification log files
  file:
    path: "/home/ansibleadmin/db_reconciliation/{{target_db}}_{{target_pdb}}"
    state: directory
  become: true
  become_user: ansibleadmin
  delegate_to: localhost
  tags: post_mig_copy_target_db_verification_files

- name: find the.log files from "{{target_verification_dir}}" directory
  find:
    paths: "{{target_verification_dir}}/"
    patterns: "*.log"
  register: log_files 
  tags: post_mig_copy_target_db_verification_files

- name: copy the verification log files from the source db to Ansible-controller for reconciliation
  fetch:
    src: "{{ item.path }}"
    dest: "/home/ansibleadmin/db_reconciliation/{{target_db}}_{{target_pdb}}/"
    flat: yes
  with_items: "{{ log_files.files }}"
  tags: post_mig_copy_target_db_verification_files

# - name: validate target database tablespaces
#   shell: |
#     . /home/oracle/{{target_db}}.env
#     echo -e "VALIDATE CHECK LOGICAL TABLESPACE {{item}};" | {{ target_oracle_home }}/bin/rman target {{target_conn_str}} 
#   with_items: "{{tablespaces.split(',')}}"
#   register: tbs_out
#   tags: post_mig_rman_validate

# - name: write the output to a file
#   lineinfile: 
#       path: "{{target_verification_dir}}/rman_validate.log"
#       line: "{{item.stdout}}"
#       create: yes
#   with_items: "{{tbs_out.results}}"
#   tags: post_mig_rman_validate


- name: validate target database tablespaces in parallel
  async: 604800 # Maximum wait time for each task in seconds (1 week)
  poll: 0       # Start the task and don't wait for it to finish
  shell: |
    . /home/oracle/{{ target_db }}.env
    echo -e "VALIDATE CHECK LOGICAL TABLESPACE {{ item }};" | {{ target_oracle_home }}/bin/rman target {{ target_conn_str }}
  with_items: "{{ tablespaces.split(',') }}"
  register: tbs_async_jobs
  tags: post_mig_rman_validate
  throttle: 5  # Limit to 5 parallel tasks

- name: Wait for all async jobs to finish
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: tbs_out
  until: tbs_out.finished
  retries: 20160  # Retry up to 1 week (20160 retries with 30-second delay each)
  delay: 30       # Delay between retries
  with_items: "{{ tbs_async_jobs.results }}"
  tags: post_mig_rman_validate

- name: Display tbs_out results
  debug:
    msg: "Job ID: {{ item.ansible_job_id }}, Output: {{ item.stdout }}"
  with_items: "{{ tbs_out.results }}"
  tags: post_mig_rman_validate

- name: Collect and write the output to a file
  lineinfile:
    path: "{{ target_verification_dir }}/rman_validate_{{target_db}}_{{target_pdb}}.log"
    line: "{{ item.ansible_job_id }}: {{ item.stdout }}"
    create: yes
  with_items: "{{ tbs_out.results }}"
  tags: post_mig_rman_validate



- name: display tbs_out
  debug:
    msg: "{{item.stdout_lines}}"
  with_items: "{{tbs_out.results}}"
  tags: post_mig_rman_validate





# - name: debug log_files
#   debug: var=log_files



# - name: recreate the stats after the migration
#   shell: |
#     . /home/oracle/{{target_db}}.env
#     echo -e "{{item}};" | {{ target_oracle_home }}/bin/sqlplus -s {{target_conn_str}} as sysdba
#   with_items: 
#       - "EXEC DBMS_STATS.gather_database_stats( method_opt => 'FOR ALL COLUMNS SIZE SKEWONLY',estimate_percent => DBMS_STATS.AUTO_SAMPLE_SIZE,cascade=>TRUE,degree => 8)"
#       - "EXEC DBMS_STATS.gather_dictionary_stats"
#       - "EXEC DBMS_STATS.gather_system_stats"
#       - "EXEC DBMS_STATS.gather_fixed_objects_stats"
#       - "EXEC DBMS_STATS.gather_database_stats( method_opt => 'FOR ALL COLUMNS SIZE AUTO',estimate_percent => DBMS_STATS.AUTO_SAMPLE_SIZE,cascade=>TRUE,degree => 8)"
#   register: stats_out
#   tags: post_mig_gather_stats

# - name: display stats_out
#   debug: 
#      msg: "{{item.stdout_lines}}"
#   with_items: "{{stats_out.results}}"
#   tags: post_mig_gather_stats



- name: Execute DBMS_STATS.gather_database_stats with SKEWONLY
  shell: |
    . /home/oracle/{{ target_db }}.env
    echo -e "SET TIME ON TIMING ON\n EXEC DBMS_STATS.gather_database_stats( method_opt => 'FOR ALL COLUMNS SIZE SKEWONLY',estimate_percent => DBMS_STATS.AUTO_SAMPLE_SIZE,cascade=>TRUE,degree => 8);" | {{ target_oracle_home }}/bin/sqlplus -s {{ target_conn_str }} as sysdba
  async: 604800  # Set to one week in seconds
  poll: 0
  register: gather_skewonly_stats_job
  tags: post_mig_gather_stats

- name: Wait for DBMS_STATS.gather_database_stats with SKEWONLY to finish
  async_status:
    jid: "{{ gather_skewonly_stats_job.ansible_job_id }}"
  register: gather_skewonly_stats_result
  until: gather_skewonly_stats_result.finished
  retries: 20160  # Total number of retries for 30-second intervals in a week
  delay: 30  # Check every 30 seconds
  tags: post_mig_gather_stats

- name: Display gather_database_stats with SKEWONLY result
  debug:
    msg: "{{ gather_skewonly_stats_result.stdout_lines }}"
  tags: post_mig_gather_stats

- name: Execute DBMS_STATS.gather_dictionary_stats
  shell: |
    . /home/oracle/{{ target_db }}.env
    echo -e "SET TIME ON TIMING ON\n EXEC DBMS_STATS.gather_dictionary_stats;" | {{ target_oracle_home }}/bin/sqlplus -s {{ target_conn_str }} as sysdba
  async: 604800  # Set to one week in seconds
  poll: 0
  register: gather_dictionary_stats_job
  tags: post_mig_gather_stats   

- name: Wait for DBMS_STATS.gather_dictionary_stats to finish
  async_status:
    jid: "{{ gather_dictionary_stats_job.ansible_job_id }}"
  register: gather_dictionary_stats_result
  until: gather_dictionary_stats_result.finished
  retries: 20160  # Total number of retries for 30-second intervals in a week
  delay: 30  # Check every 30 seconds
  tags: post_mig_gather_stats

- name: Display gather_dictionary_stats result
  debug:
    msg: "{{ gather_dictionary_stats_result.stdout_lines }}"
  tags: post_mig_gather_stats

- name: Execute DBMS_STATS.gather_system_stats
  shell: |
    . /home/oracle/{{ target_db }}.env
    echo -e "SET TIME ON TIMING ON\n EXEC DBMS_STATS.gather_system_stats;" | {{ target_oracle_home }}/bin/sqlplus -s {{ target_conn_str }} as sysdba
  async: 604800  # Set to one week in seconds
  poll: 0
  register: gather_system_stats_job
  tags: post_mig_gather_stats

- name: Wait for DBMS_STATS.gather_system_stats to finish
  async_status:
    jid: "{{ gather_system_stats_job.ansible_job_id }}"
  register: gather_system_stats_result
  until: gather_system_stats_result.finished
  retries: 20160  # Total number of retries for 30-second intervals in a week
  delay: 30  # Check every 30 seconds
  tags: post_mig_gather_stats    

- name: Display gather_system_stats result
  debug:
    msg: "{{ gather_system_stats_result.stdout_lines }}"
  tags: post_mig_gather_stats  


- name: Execute DBMS_STATS.gather_fixed_objects_stats
  shell: |
    . /home/oracle/{{ target_db }}.env
    echo -e "SET TIME ON TIMING ON\n EXEC DBMS_STATS.gather_fixed_objects_stats;" | {{ target_oracle_home }}/bin/sqlplus -s {{ target_conn_str }} as sysdba
  async: 604800  # Set to one week in seconds
  poll: 0
  register: gather_fixed_objects_stats_job
  tags: post_mig_gather_stats

- name: Wait for DBMS_STATS.gather_fixed_objects_stats to finish
  async_status:
    jid: "{{ gather_fixed_objects_stats_job.ansible_job_id }}"
  register: gather_fixed_objects_stats_result
  until: gather_fixed_objects_stats_result.finished
  retries: 20160  # Total number of retries for 30-second intervals in a week
  delay: 30  # Check every 30 seconds
  tags: post_mig_gather_stats   

- name: Display gather_fixed_objects_stats result
  debug:
    msg: "{{ gather_fixed_objects_stats_result.stdout_lines }}"
  tags: post_mig_gather_stats 
    
- name: Execute DBMS_STATS.gather_database_stats with AUTO
  shell: |
    . /home/oracle/{{ target_db }}.env
    echo -e "SET TIME ON TIMING ON\n EXEC DBMS_STATS.gather_database_stats( method_opt => 'FOR ALL COLUMNS SIZE AUTO',estimate_percent => DBMS_STATS.AUTO_SAMPLE_SIZE,cascade=>TRUE,degree => 8);" | {{ target_oracle_home }}/bin/sqlplus -s {{ target_conn_str }} as sysdba
  async: 604800  # Set to one week in seconds
  poll: 0
  register: gather_auto_stats_job
  tags: post_mig_gather_stats    
    
- name: Wait for DBMS_STATS.gather_database_stats with AUTO to finish
  async_status:
    jid: "{{ gather_auto_stats_job.ansible_job_id }}"
  register: gather_auto_stats_result
  until: gather_auto_stats_result.finished
  retries: 20160  # Total number of retries for 30-second intervals in a week
  delay: 30  # Check every 30 seconds
  tags: post_mig_gather_stats

- name: Display gather_database_stats with AUTO result
  debug:
    msg: "{{ gather_auto_stats_result.stdout_lines }}"
  tags: post_mig_gather_stats

    
    
    
    

    
    
    
    




# - name: encrypt the migrated tablespaces
#   shell: |
#     . /home/oracle/{{target_db}}.env
#     echo -e "alter tablespace {{item}}  encryption online encrypt;" | {{ target_oracle_home }}/bin/sqlplus -s {{target_conn_str}} as sysdba 
#   with_items: "{{tablespaces.split(',')}}"
#   register: tde_out
#   tags: post_mig_enable_tde

# - name: display tde_out
#   debug:
#     msg: "{{item.stdout_lines}}"
#   with_items: "{{tde_out.results}}"
#   tags: post_mig_enable_tde


- name: Encrypt the migrated tablespaces in parallel
  async: 604800 # Maximum wait time for each task in seconds (1 week)
  poll: 0       # Start the task and don't wait for it to finish
  shell: |
    . /home/oracle/{{ target_db }}.env
    echo -e "SET TIME ON TIMING ON\n alter tablespace {{ item }} encryption online encrypt;" | {{ target_oracle_home }}/bin/sqlplus -s {{ target_conn_str }} as sysdba
  with_items: "{{ tablespaces.split(',') }}"
  register: tde_async_jobs
  tags: post_mig_enable_tde
  throttle: 5  # Limit to 5 parallel tasks

- name: Wait for all async jobs to finish
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: tde_out
  until: tde_out.finished
  retries: 20160  # Retry up to 1 week (20160 retries with 30-second delay each)
  delay: 30       # Delay between retries
  with_items: "{{ tde_async_jobs.results }}"
  tags: post_mig_enable_tde

- name: Display tde_out results
  debug:
    msg: "Job ID: {{ item.ansible_job_id }}, Output: {{ item.stdout }}"
  with_items: "{{ tde_out.results }}"
  tags: post_mig_enable_tde

- name: Collect and write the output to a file
  lineinfile:
    path: "{{ target_verification_dir }}/tde_encryption_{{target_db}}_{{target_pdb}}.log"
    line: "Job ID: {{ item.ansible_job_id }}, Output: {{ item.stdout }}"
    create: yes
  with_items: "{{ tde_out.results }}"
  tags: post_mig_enable_tde





- name: validate all the migrated tablespaces have been encrypted on the {{target_pdb}}
  shell: |
    . /home/oracle/{{target_db}}.env
    echo -e "select tablespace_name, encrypted from dba_tablespaces where tablespace_name='{{item}}';" | {{ target_oracle_home }}/bin/sqlplus -s {{target_conn_str}} as sysdba
  with_items: "{{tablespaces.split(',')}}"
  register: out
  #failed_when: "'NO' in item.stdout"
  tags: post_mig_enable_tde

- name: display the encryption status
  debug:
    msg: "{{item.stdout_lines}}"
  with_items: "{{out.results}}"
  tags: post_mig_enable_tde

- name: Fail if any tablespace is not encrypted
  fail:
    msg: "The tablespace {{ item.item }} is not encrypted."
  when: "'NO' in item.stdout"
  with_items: "{{ out.results }}"
  tags: post_mig_enable_tde

- name: retrive tablespaces encrypted status on the {{target_pdb}}
  shell: |
    . /home/oracle/{{target_db}}.env
    echo -e "select tablespace_name, encrypted from dba_tablespaces;" | {{ target_oracle_home }}/bin/sqlplus -s {{target_conn_str}} as sysdba
  register: tbs_status
  tags: post_mig_enable_tde

- name: display all tablespaces encrypted status
  debug:
    msg: "{{ tbs_status.stdout_lines }}"
  tags: post_mig_enable_tde



- name: copy the rman_validate andtde_encryption log files from the source db to Ansible-controller for reconciliation
  fetch:
    src: "{{ item }}"
    dest: "/home/ansibleadmin/db_reconciliation/{{target_db}}_{{target_pdb}}/"
    flat: yes
  loop:
     - "{{ target_verification_dir }}/rman_validate_{{target_db}}_{{target_pdb}}.log"
     - "{{ target_verification_dir }}/tde_encryption_{{target_db}}_{{target_pdb}}.log"
  tags: post_mig_copy_rman_tde_logs
  