---
# tasks file for level_0_restore

- name: check if backup files have been arrived to {{target_hostname}}
  find:
    paths: "{{target_xtts_scratch_dir}}/"
  register: filesFound

- fail: 
    msg: " The {{target_xtts_scratch_dir}} is empty"
  when: filesFound.matched == 0

- debug:
    msg: 
     - "Backups found. Proceeding.."
     - "filesFound.stdout_lines"
  when: filesFound.matched > 0
     

- name: grep the initial (level_0) backups name from the incrbackups.txt
  shell: cat {{target_xtts_scripts_dir}}/incrbackups.txt | awk -F '/' '{print $NF}'
  register: level_0_backups_out

- name: display level_0_backups_out
  debug: 
    msg: "{{level_0_backups_out.stdout_lines}}"

- name: check all the required level_0 backups exist on target
  shell: ls -al {{target_xtts_scratch_dir}}/{{item}} 
  with_items:
   - "{{level_0_backups_out.stdout_lines}}"
  register: validate_out
  ignore_errors: true

- fail:
   msg: "not all the required level_0 backups exist on Target"
  with_items: "{{validate_out.results}}"
  when: not item.rc == 0 



- name: check res.txt file is available on  {{target_xtts_scripts_dir}}
  stat: 
    path: "{{target_xtts_scripts_dir}}/res.txt"
  register: res_out

- fail: 
    msg: "res.txt file can not be found"
  when: not res_out.stat.exists

- name: check if the level_0 backups info has been written into the res.txt file
  shell: grep -w {{item}} {{target_xtts_scripts_dir}}/res.txt
  with_items:
   - "{{level_0_backups_out.stdout_lines}}"
  register: validate2_out
  ignore_errors: true

- fail:
   msg: "res.txt file does not have all the level_0 backup info and maybe corrupted"
  with_items: "{{validate2_out.results}}"
  when: not item.rc == 0 


## level_0 restore

- name: do level 0 resore on {{target_hostname}}
  shell: |
    export TMPDIR={{target_xtts_scripts_dir}}
    export ORACLE_SID={{target_oracle_sid}}
    export ORACLE_HOME={{target_oracle_home}}
    export NLS_LANG={{ nls_lang }}
    cd {{target_xtts_scripts_dir}}
    {{target_oracle_home}}/perl/bin/perl xttdriver.pl --restore
  register: restore_out

- name: validate if the restore has been completed.
  debug: 
    msg:
    - "Level 0 restore has now been completed"
    - "{{restore_out.stdout_lines}}"
  when: restore_out.rc == 0

  